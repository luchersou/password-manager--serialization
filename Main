import javax.crypto.Cipher;
import javax.crypto.KeyGenerator;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import java.io.*;
import java.util.*;

class CredentialVault {
    private static final String DATA_FILE = "credentials.dat";
    private static final String KEY_STORAGE = "encryption_key.dat";
    private static final String SETUP_MESSAGE = "No master key found. Creating a new one.";
    private static SecretKey encryptionKey;
    private String securedMasterKey;
    private List<CredentialEntry> records = new ArrayList<>();

    public static void main(String[] args) {
        CredentialVault vault = new CredentialVault();

        loadOrCreateKey();

        if (vault.initialize()) {
            vault.execute();
            vault.storeRecords();
        }
    }

    private static void loadOrCreateKey() {
        File keyFile = new File(KEY_STORAGE);
        if (keyFile.exists()) {
            try (FileInputStream fis = new FileInputStream(keyFile)) {
                byte[] keyBytes = fis.readAllBytes();
                encryptionKey = new SecretKeySpec(keyBytes, "AES");
            } catch (IOException e) {
                throw new RuntimeException("Error loading encryption key", e);
            }
        } else {
            try {
                KeyGenerator keyGen = KeyGenerator.getInstance("AES");
                keyGen.init(128);
                encryptionKey = keyGen.generateKey();

                try (FileOutputStream fos = new FileOutputStream(KEY_STORAGE)) {
                    fos.write(encryptionKey.getEncoded());
                }
            } catch (Exception e) {
                throw new RuntimeException("Error generating encryption key", e);
            }
        }
    }

    private boolean initialize() {
        File file = new File(DATA_FILE);
        if (!file.exists()) {
            System.out.println(SETUP_MESSAGE);
            defineMasterKey();
        } else {
            this.loadRecords();
            if (!verifyAccess()) {
                return false;
            }
        }
        return true;
    }

    private boolean verifyAccess() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter Master Key: ");
        String enteredKey = scanner.nextLine();
        String encryptedEnteredKey = encrypt(enteredKey);

        if (!securedMasterKey.equals(encryptedEnteredKey)) {
            System.out.println("Access Denied. Incorrect Key.");
            return false;
        }

        System.out.println("Access Granted.");
        return true;
    }

    private void defineMasterKey() {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Set your Master Key: ");
        String masterKey = scanner.nextLine();
        this.securedMasterKey = encrypt(masterKey);
        storeRecords();
    }

    private void execute() {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nCredential Vault");
            System.out.println("1. Store Credential");
            System.out.println("2. Show Credentials");
            System.out.println("3. Delete Credential");
            System.out.println("4. Exit");
            System.out.print("Choose an option: ");
            int option = scanner.nextInt();
            scanner.nextLine();

            switch (option) {
                case 1:
                    storeCredential(scanner);
                    break;
                case 2:
                    showCredentials();
                    break;
                case 3:
                    deleteCredential(scanner);
                    break;
                case 4:
                    return;
                default:
                    System.out.println("Invalid option. Try again.");
            }
        }
    }

    private void storeCredential(Scanner scanner) {
        System.out.print("Enter Service Name: ");
        String serviceName = scanner.nextLine();
        System.out.print("Enter Username: ");
        String user = scanner.nextLine();
        System.out.print("Enter Password: ");
        String pass = scanner.nextLine();

        String encryptedPass = encrypt(pass);
        CredentialEntry record = new CredentialEntry(serviceName, user, encryptedPass);
        records.add(record);

        System.out.println("Credential stored successfully.");
    }

    private void showCredentials() {
        for (CredentialEntry record : records) {
            String decryptedPass = decrypt(record.getEncryptedPassword());
            System.out.println("Service: " + record.getServiceName());
            System.out.println("Username: " + record.getUsername());
            System.out.println("Password: " + decryptedPass);
            System.out.println();
        }
    }

    private void deleteCredential(Scanner scanner) {
        System.out.print("Enter Service Name to remove: ");
        String serviceName = scanner.nextLine();

        records.removeIf(record -> record.getServiceName().equalsIgnoreCase(serviceName));
        System.out.println("Credential removed successfully.");
    }

    private String encrypt(String data) {
        try {
            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.ENCRYPT_MODE, encryptionKey);
            byte[] encryptedBytes = cipher.doFinal(data.getBytes());
            return Base64.getEncoder().encodeToString(encryptedBytes);
        } catch (Exception e) {
            throw new RuntimeException("Error encrypting data", e);
        }
    }

    private String decrypt(String encryptedData) {
        try {
            Cipher cipher = Cipher.getInstance("AES");
            cipher.init(Cipher.DECRYPT_MODE, encryptionKey);
            byte[] decryptedBytes = cipher.doFinal(Base64.getDecoder().decode(encryptedData));
            return new String(decryptedBytes);
        } catch (Exception e) {
            throw new RuntimeException("Error decrypting data", e);
        }
    }

    private void loadRecords() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(DATA_FILE))) {
            this.securedMasterKey = (String) ois.readObject();
            records = (List<CredentialEntry>) ois.readObject();
        } catch (FileNotFoundException e) {
            System.out.println("No saved credentials found. Starting fresh.");
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Error loading credentials: " + e.getMessage());
        }
    }

    private void storeRecords() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(DATA_FILE))) {
            oos.writeObject(securedMasterKey);
            oos.writeObject(records);
        } catch (IOException e) {
            System.out.println("Error saving credentials: " + e.getMessage());
        }
    }
}
